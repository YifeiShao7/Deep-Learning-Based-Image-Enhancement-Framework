# -*- coding: utf-8 -*-
import copy

import cv2
# Form implementation generated from reading ui file 'version0402.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from queue import Queue
from PyQt5 import QtCore, QtGui, QtWidgets
import copy
from PyQt5.QtCore import Qt, QObject
from PyQt5.QtGui import QImage, QPixmap, QGuiApplication, QCursor, QColor, QPainter
from PyQt5.QtWidgets import QFileDialog, QGraphicsPixmapItem, QGraphicsScene, QSlider, QApplication, QInputDialog, \
    QLineEdit, QMessageBox
from com.Processing.imageutil.control.GCANetUtil import gcan_process
from com.Processing.imageutil.ui.ImageLabel import ImageLabel
from com.Processing.imageutil.control.MirnetUtil import *
from com.Processing.imageutil.control.BasicUtil import *
from com.Processing.imageutil.control.UndoQueue import *
from com.Processing.imageutil.ui.CustomDialog import *
from com.Processing.imageutil.control.HiFillUtil import inpaint_process

class MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1060, 774)
        MainWindow.setMinimumSize(QtCore.QSize(1060, 774))
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)
        self.create_widget(MainWindow)

        self.retranslateUi(MainWindow)
        self.__current_img = None
        self.__original_img = None  # origin image
        self.__current_operation = None  # current operation record
        self.__temp_img = None

        self.__undoQueue = Queue(maxsize=10)
        self.__undoQueueIndex = 0

        self.last_x, self.last_y = None, None
        self.drawMask = False
        clear()

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    def create_widget(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title = QtWidgets.QFrame(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(0, 0, 1060, 65))
        self.title.setMinimumSize(QtCore.QSize(0, 65))
        self.title.setMaximumSize(QtCore.QSize(188888, 55))
        self.title.setStyleSheet("background: rgb(60, 60, 60)")
        self.title.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.title.setFrameShadow(QtWidgets.QFrame.Raised)
        self.title.setObjectName("title")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.title)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.operation = QtWidgets.QFrame(self.title)
        self.operation.setMinimumSize(QtCore.QSize(900, 39))
        self.operation.setMaximumSize(QtCore.QSize(900, 45))
        self.operation.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.operation.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.operation.setFrameShadow(QtWidgets.QFrame.Raised)
        self.operation.setObjectName("operation")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.operation)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btn_open = QtWidgets.QPushButton(self.operation)
        self.btn_open.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_open.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_open.setObjectName("btn_open")
        self.horizontalLayout_3.addWidget(self.btn_open)
        self.btn_open.setStyleSheet('''
                    QPushButton {
                        background-color: #3a3a3a;
                        color: #fff;
                    }
                ''')

        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)

        self.horizontalLayout_3.addItem(spacerItem)
        self.btn_save = QtWidgets.QPushButton(self.operation)
        self.btn_save.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_save.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_save.setObjectName("btn_save")
        self.horizontalLayout_3.addWidget(self.btn_save)
        self.btn_save.setStyleSheet('''
                            QPushButton {
                                background-color: #3a3a3a;
                                color: #fff;
                            }
                        ''')
        spacerItem1 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.btn_undo = QtWidgets.QPushButton(self.operation)
        self.btn_undo.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_undo.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_undo.setObjectName("btn_undo")
        self.btn_undo.setEnabled(False)
        self.horizontalLayout_3.addWidget(self.btn_undo)
        self.btn_undo.setStyleSheet('''
            QPushButton {
                background-color: #3a3a3a;
                color: #fff;
            }
            
            QPushButton:disabled {
                background-color: #3a3a3a;
                color: rgba(255,255,255,0.3);
            }
        ''')
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.btn_redo = QtWidgets.QPushButton(self.operation)
        self.btn_redo.setObjectName("btn_redo")
        self.btn_redo.setEnabled(False)
        self.horizontalLayout_3.addWidget(self.btn_redo)
        self.btn_redo.setStyleSheet('''
                    QPushButton {
                        background-color: #3a3a3a;
                        color: #fff;
                    }

                    QPushButton:disabled {
                        background-color: #3a3a3a;
                        color: rgba(255,255,255,0.3);
                    }
                ''')
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.btn_cutting = QtWidgets.QPushButton(self.operation)
        self.btn_cutting.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_cutting.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_cutting.setObjectName("btn_cutting")
        self.horizontalLayout_3.addWidget(self.btn_cutting)
        self.btn_cutting.setStyleSheet('''
                                    QPushButton {
                                        background-color: #3a3a3a;
                                        color: #fff;
                                    }
                                ''')
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.btn_confirm = QtWidgets.QPushButton(self.operation)
        self.btn_confirm.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_confirm.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_confirm.setObjectName("btn_confirm")
        self.btn_confirm.setEnabled(False)
        self.horizontalLayout_3.addWidget(self.btn_confirm)
        self.btn_confirm.setStyleSheet('''
                            QPushButton {
                                background-color: #3a3a3a;
                                color: #fff;
                            }

                            QPushButton:disabled {
                                background-color: #3a3a3a;
                                color: rgba(255,255,255,0.3);
                            }
                        ''')
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.btn_cancel = QtWidgets.QPushButton(self.operation)
        self.btn_cancel.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_cancel.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_cancel.setObjectName("btn_cancel")
        self.btn_cancel.setEnabled(False)
        self.horizontalLayout_3.addWidget(self.btn_cancel)
        self.btn_cancel.setStyleSheet('''
                            QPushButton {
                                background-color: #3a3a3a;
                                color: #fff;
                            }

                            QPushButton:disabled {
                                background-color: #3a3a3a;
                                color: rgba(255,255,255,0.3);
                            }
                        ''')
        spacerItem6 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.btn_origin = QtWidgets.QPushButton(self.operation)
        self.btn_origin.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_origin.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_origin.setObjectName("btn_origin")
        self.horizontalLayout_3.addWidget(self.btn_origin)
        self.btn_origin.setStyleSheet('''
                                            QPushButton {
                                                background-color: #3a3a3a;
                                                color: #fff;
                                            }
                                        ''')
        self.horizontalLayout_4.addWidget(self.operation)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(0, 60, 881, 691))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.frame_3.setStyleSheet('''
            QFrame {
                background-color: #2a2a2a;
            }
        ''')
        self.gridLayout = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout.setObjectName("gridLayout")

        self.img_panel = ImageLabel(self.frame_3)
        # self.img_panel.setMinimumSize(QtCore.QSize(860, 660))
        self.img_panel.setMaximumSize(QtCore.QSize(860, 660))
        self.img_panel.setStyleSheet("border-width: 1px;border-style: solid;border-color: rgb(218, 218, 218)")
        self.img_panel.setText("")
        self.img_panel.setObjectName("img_panel")
        self.img_panel.setScaledContents(True)
        self.gridLayout.addWidget(self.img_panel, 1, 0, 1, 1)
        self.img_panel.setStyleSheet('''
            ImageLabel {
                background-color: #2a2a2a;
            }
        ''')

        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setGeometry(QtCore.QRect(880, 60, 150, 704))
        self.frame_5.setMinimumSize(QtCore.QSize(180, 0))
        self.frame_5.setMaximumSize(QtCore.QSize(180, 16777215))
        self.frame_5.setStyleSheet("background: rgb(51, 51, 51)")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_6 = QtWidgets.QFrame(self.frame_5)
        self.frame_6.setGeometry(QtCore.QRect(10, 10, 160, 670))
        self.frame_6.setMinimumSize(QtCore.QSize(160, 670))
        self.frame_6.setMaximumSize(QtCore.QSize(160, 670))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.frame_6.setStyleSheet('''
        QFrame {
            border-width: 1px;
            border-style: solid;
            border-color: #555555;
        };
        ''')
        self.btn_contrast = QtWidgets.QPushButton(self.frame_6)
        self.btn_contrast.setGeometry(QtCore.QRect(20, 320, 120, 35))
        self.btn_contrast.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_contrast.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_contrast.setObjectName("btn_contrast")
        self.btn_contrast.setStyleSheet('''
        QPushButton {
            background-color: #3a3a3a;
            color: #fff;
        }
        ''')
        self.btn_lol = QtWidgets.QPushButton(self.frame_6)
        self.btn_lol.setGeometry(QtCore.QRect(20, 375, 120, 35))
        self.btn_lol.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_lol.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_lol.setObjectName("btn_lol")
        self.btn_lol.setStyleSheet('''
        QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_sr = QtWidgets.QPushButton(self.frame_6)
        self.btn_sr.setGeometry(QtCore.QRect(20, 430, 120, 35))
        self.btn_sr.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_sr.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_sr.setObjectName("btn_sr")
        self.btn_sr.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_denoise = QtWidgets.QPushButton(self.frame_6)
        self.btn_denoise.setGeometry(QtCore.QRect(20, 45, 120, 35))
        self.btn_denoise.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_denoise.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_denoise.setObjectName("btn_denoise")
        self.btn_denoise.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_deblur = QtWidgets.QPushButton(self.frame_6)
        self.btn_deblur.setGeometry(QtCore.QRect(20, 100, 120, 35))
        self.btn_deblur.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_deblur.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_deblur.setObjectName("btn_deblur")
        self.btn_deblur.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_dehaze = QtWidgets.QPushButton(self.frame_6)
        self.btn_dehaze.setGeometry(QtCore.QRect(20, 155, 120, 35))
        self.btn_dehaze.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_dehaze.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_dehaze.setObjectName("btn_dehaze")
        self.btn_dehaze.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_derain = QtWidgets.QPushButton(self.frame_6)
        self.btn_derain.setGeometry(QtCore.QRect(20, 210, 120, 35))
        self.btn_derain.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_derain.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_derain.setObjectName("btn_derain")
        self.btn_derain.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_inpainting = QtWidgets.QPushButton(self.frame_6)
        self.btn_inpainting.setGeometry(QtCore.QRect(20, 265, 120, 35))
        self.btn_inpainting.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_inpainting.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_inpainting.setObjectName("btn_inpainting")
        self.btn_inpainting.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.frame = QtWidgets.QFrame(self.frame_6)
        self.frame.setGeometry(QtCore.QRect(0, 490, 180, 5))
        self.frame.setMinimumSize(QtCore.QSize(180, 5))
        self.frame.setMaximumSize(QtCore.QSize(16777215, 5))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.frame.setStyleSheet('''
        QFrame {
            background-color: #555555;
        }
        ''')
        self.btn_rotate = QtWidgets.QPushButton(self.frame_6)
        self.btn_rotate.setGeometry(QtCore.QRect(20, 550, 120, 35))
        self.btn_rotate.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_rotate.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_rotate.setObjectName("btn_rotate")
        self.btn_rotate.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.btn_mirror = QtWidgets.QPushButton(self.frame_6)
        self.btn_mirror.setGeometry(QtCore.QRect(20, 610, 120, 35))
        self.btn_mirror.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_mirror.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_mirror.setObjectName("btn_mirror")
        self.btn_mirror.setStyleSheet('''
                                                            QPushButton {
                                                                background-color: #3a3a3a;
                                                                color: #fff;
                                                            }
                                                        ''')
        self.label = QtWidgets.QLabel(self.frame_6)
        self.label.setGeometry(QtCore.QRect(35, 510, 120, 16))
        self.label.setMinimumSize(QtCore.QSize(120, 0))
        self.label.setMaximumSize(QtCore.QSize(120, 16777215))
        self.label.setObjectName("label")
        self.label.setStyleSheet('''
            QLabel {
                color: #fff;
                border-width: 0;
            }
        ''')
        self.label_2 = QtWidgets.QLabel(self.frame_6)
        self.label_2.setGeometry(QtCore.QRect(35, 10, 120, 16))
        self.label_2.setMinimumSize(QtCore.QSize(120, 0))
        self.label_2.setMaximumSize(QtCore.QSize(120, 16777215))
        self.label_2.setObjectName("label_2")
        self.label_2.setStyleSheet('''
            QLabel {
                color: #fff;
                border-width: 0;
            }
        ''')
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_open.setText(_translate("MainWindow", "Open"))
        self.btn_save.setText(_translate("MainWindow", "Save"))
        self.btn_undo.setText(_translate("MainWindow", "Undo"))
        self.btn_redo.setText(_translate("MainWindow", "Redo"))
        self.btn_cutting.setText(_translate("MainWindow", "Clip"))
        self.btn_confirm.setText(_translate("MainWindow", "Confirm"))
        self.btn_cancel.setText(_translate("MainWindow", "Cancel"))
        self.btn_origin.setText(_translate("MainWindow", "Compare"))
        self.btn_contrast.setText(_translate("MainWindow", "Contrast Enhance"))
        self.btn_lol.setText(_translate("MainWindow", "Lightness Enhance"))
        self.btn_sr.setText(_translate("MainWindow", "Super Resolution"))
        self.btn_denoise.setText(_translate("MainWindow", "Denoise"))
        self.btn_deblur.setText(_translate("MainWindow", "Deblur"))
        self.btn_dehaze.setText(_translate("MainWindow", "Dehaze"))
        self.btn_derain.setText(_translate("MainWindow", "Derain"))
        self.btn_inpainting.setText(_translate("MainWindow", "Inpaint"))
        self.btn_rotate.setText(_translate("MainWindow", "Rotate"))
        self.btn_mirror.setText(_translate("MainWindow", "Mirror"))
        self.label.setText(_translate("MainWindow", "Basic Enhance"))
        self.label_2.setText(_translate("MainWindow", "Auto Enhance"))

    @QtCore.pyqtSlot()
    def on_btn_open_clicked(self):
        """
        On click event of "open" button
        """
        img_name, img_type = QFileDialog.getOpenFileName(self, "Open the image", "", "*.png *.jpg *.jpeg *.bmp")
        if (img_name == "") or (img_name is None):
            if self.__undoQueue != 0:
                return
            self.__show_warning_message_box("Please Select Image")
            return

        img = cv2.imread(img_name)

        img = resize_input(img, 860, 660)

        # Initialize the history records
        self.showImage(img)
        self.__current_img = img
        # self.__last_img = self.__current_img
        self.__original_img = copy.deepcopy(self.__current_img)
        self.__original_img_path = img_name

        add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
        self.btn_redo.setEnabled(False)
        if self.__undoQueue.qsize() > 1:
            self.btn_undo.setEnabled(True)
        else:
            self.btn_undo.setEnabled(False)

        self.clear_button_color()
        self.btn_open.setStyleSheet('''
        QPushButton {
            color: #ffd700
        }
        ''')

    def showImage(self, img, is_grayscale=False):
        x = img.shape[1]  # get image shape
        y = img.shape[0]
        self.zoomscale = 1  # image zoom scale
        bytesPerLine = 3 * x

        if len(img.shape) == 2:  # if input image is grey-scale, turns to 3-channels
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)

        frame = QImage(img.data.tobytes(), x, y, bytesPerLine, QImage.Format_RGB888).rgbSwapped()
        pix = QPixmap.fromImage(frame)
        self.img_panel.setPixmap(pix)
        self.img_panel.setFixedSize(pix.width(), pix.height())
        self.img_panel.repaint()

    def __show_warning_message_box(self, msg):
        QMessageBox.warning(self, "Warning", msg, QMessageBox.Ok)

    def __show_info_message_box(self, msg):
        QMessageBox.information(self, "Note", msg, QMessageBox.Ok)

    @QtCore.pyqtSlot()
    def on_btn_save_clicked(self):
        """
        On click event of "Save" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        ext_name = self.__original_img_path[self.__original_img_path.rindex("."):]
        img_path, img_type = QFileDialog.getSaveFileName(self, "Save Image", self.__original_img_path, "*" + ext_name)
        if (img_path != "" and img_type != ""):
            pixmap = self.img_panel.pixmap()
            pixmap.save(img_path)

        self.clear_button_color()
        self.btn_save.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_contrast_clicked(self):
        """
                On click event of "Contrast" button
                """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        dialog = ContrastDialog()
        dialog.show()
        result_code = dialog.exec_()

        if result_code == QtWidgets.QDialog.Accepted:
            cate, value = dialog.get_contrast_result()
            if cate == "auto":
                self.__current_img = mirnet_process(self.__current_img, "contrast_enhancement")
            elif cate == "custom":
                self.__current_img = adjust_contrast(self.__current_img, value)
            self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
            self.showImage(self.__current_img)
            self.btn_undo.setEnabled(True)
            self.btn_redo.setEnabled(False)

            self.clear_button_color()
            self.btn_contrast.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_lol_clicked(self):
        """
        On click event of "low light enhancement" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        dialog = LightDialog()
        dialog.show()
        result_code = dialog.exec_()

        if result_code == QtWidgets.QDialog.Accepted:
            cate, value = dialog.get_lightness_result()
            if cate == "auto":
                self.__current_img = mirnet_process(self.__current_img, "lowlight_enhancement")
            elif cate == "custom":
                self.__current_img = adjust_lightness(self.__current_img, value)
            self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
            self.showImage(self.__current_img)
            self.btn_undo.setEnabled(True)
            self.btn_redo.setEnabled(False)

            self.clear_button_color()
            self.btn_lol.setStyleSheet('''
                    QPushButton {
                        color: #ffd700
                    }
                    ''')


    @QtCore.pyqtSlot()
    def on_btn_denoise_clicked(self):
        """
        On click event of "denoising" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirnet_process(self.__current_img, "real_denoising")
        self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
        self.showImage(self.__current_img)
        self.btn_undo.setEnabled(True)
        self.btn_redo.setEnabled(False)

        self.clear_button_color()
        self.btn_denoise.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_deblur_clicked(self):
        """
        On click event of "deblurring" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirnet_process(self.__current_img, "deblurring")
        self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
        self.showImage(self.__current_img)
        self.btn_undo.setEnabled(True)
        self.btn_redo.setEnabled(False)

        self.clear_button_color()
        self.btn_deblur.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_sr_clicked(self):
        """
        On click event of "low light enhancement" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        dialog = SrDialog()
        dialog.show()
        result_code = dialog.exec_()

        if result_code == QtWidgets.QDialog.Accepted:
            sr_scale = dialog.get_sr_result()
            if sr_scale == 0:
                self.__show_warning_message_box("Haven't Select Any Choice")
                return
            self.__current_img = mirnet_process(self.__current_img, "super_resolution", int(sr_scale))
            self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
            self.showImage(self.__current_img)
            self.btn_undo.setEnabled(True)
            self.btn_redo.setEnabled(False)

            self.clear_button_color()
            self.btn_sr.setStyleSheet('''
                    QPushButton {
                        color: #ffd700
                    }
                    ''')

    @QtCore.pyqtSlot()
    def on_btn_dehaze_clicked(self):
        """
        On click event of "Contrast" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = gcan_process(self.__current_img, "dehaze")
        self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
        self.showImage(self.__current_img)
        self.btn_undo.setEnabled(True)
        self.btn_redo.setEnabled(False)

        self.clear_button_color()
        self.btn_dehaze.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_derain_clicked(self):
        """
        On click event of "Contrast" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = gcan_process(self.__current_img, "derain")
        self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
        self.showImage(self.__current_img)
        self.btn_undo.setEnabled(True)
        self.btn_redo.setEnabled(False)

        self.clear_button_color()
        self.btn_derain.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_rotate_clicked(self):

        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        dialog = RotateDialog()
        dialog.show()
        result_code = dialog.exec_()

        if result_code == QtWidgets.QDialog.Accepted:
            rotate_cate = dialog.get_rotate_result()
            if rotate_cate == 0:
                self.__show_warning_message_box("Haven't Select Any Choice")
                return
            self.__current_img = rotate_transfer(self.__current_img, int(rotate_cate))
            self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
            self.showImage(self.__current_img)
            self.btn_undo.setEnabled(True)
            self.btn_redo.setEnabled(False)

            self.clear_button_color()
            self.btn_rotate.setStyleSheet('''
                    QPushButton {
                        color: #ffd700
                    }
                    ''')

    @QtCore.pyqtSlot()
    def on_btn_mirror_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        dialog = MirrorDialog()
        dialog.show()
        result_code = dialog.exec_()

        if result_code == QtWidgets.QDialog.Accepted:
            mirror_dir = dialog.get_mirror_dir()
            if mirror_dir == 0:
                self.__show_warning_message_box("Haven't Select Any Choice")
                return
            self.__current_img = mirror_transfer(self.__current_img, int(mirror_dir))
            self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
            self.showImage(self.__current_img)
            self.btn_undo.setEnabled(True)
            self.btn_redo.setEnabled(False)

            self.clear_button_color()
            self.btn_mirror.setStyleSheet('''
                    QPushButton {
                        color: #ffd700
                    }
                    ''')

    @QtCore.pyqtSlot()
    def on_btn_origin_pressed(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        self.showImage(self.__original_img)
    @QtCore.pyqtSlot()
    def on_btn_origin_released(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_cutting_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        self.__show_info_message_box("Click Confirm button to ensure your modification")
        self.btn_confirm.setEnabled(True)
        self.btn_cancel.setEnabled(True)
        self.__current_operation = "clip"
        self.img_panel.flag = 1
        self.img_panel.setCursor(Qt.CrossCursor)

    @QtCore.pyqtSlot()
    def on_btn_confirm_clicked(self):
        if self.__current_operation == "clip":
            x_start, x_end = self.img_panel.img_x_start, self.img_panel.img_x_end
            y_start, y_end = self.img_panel.img_y_start, self.img_panel.img_y_end
            if (x_start == 0 and x_end == 0 and y_start == 0 and y_end == 0):
                self.showImage(self.__current_img)
                self.btn_confirm.setEnabled(False)
                self.btn_cancel.setEnabled(False)
                return
            else:
                self.__current_img = crop_image(self.__current_img, x_start, x_end, y_start, y_end)
                self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue,
                                                                  self.__undoQueueIndex)
                self.showImage(self.__current_img)

                self.img_panel.clearRect()
                self.img_panel.flag = 0

                self.btn_confirm.setEnabled(False)
                self.btn_cancel.setEnabled(False)

                self.btn_undo.setEnabled(True)
                self.btn_redo.setEnabled(False)

                self.clear_button_color()
                self.btn_cutting.setStyleSheet('''
                        QPushButton {
                            color: #ffd700
                        }
                        ''')

        elif self.__current_operation == "draw_mask":
            qimage = self.img_panel.mask.toImage()
            width = qimage.width()
            height = qimage.height()
            buffer = qimage.bits().asstring(qimage.byteCount())
            array = np.frombuffer(buffer, dtype=np.uint8).reshape(height, width, 4)
            rgb_array = array[:,:,:3]
            result = inpaint_process(self.__current_img, rgb_array)
            self.__current_img = result

            self.showImage(self.__current_img)
            self.img_panel.update()
            self.__undoQueue, self.__undoQueueIndex = add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)
            self.img_panel.flag = 0

            self.btn_confirm.setEnabled(False)
            self.btn_cancel.setEnabled(False)

            self.btn_undo.setEnabled(True)
            self.btn_redo.setEnabled(False)

            self.clear_button_color()
            self.btn_inpainting.setStyleSheet('''
                    QPushButton {
                        color: #ffd700
                    }
                    ''')

        # refresh params
        self.__current_operation = None


    @QtCore.pyqtSlot()
    def on_btn_cancel_clicked(self):
        if self.__current_operation == "clip":
            self.img_panel.clearRect()
            self.img_panel.flag = 0
            self.btn_confirm.setEnabled(False)
            self.btn_cancel.setEnabled(False)
            return
        if self.__current_operation == "draw_mask":
            self.img_panel.clearRect()
            self.img_panel.flag = 0
            self.btn_confirm.setEnabled(False)
            self.btn_cancel.setEnabled(False)
            self.showImage(self.__current_img)
        self.__current_operation = None

    @QtCore.pyqtSlot()
    def on_btn_undo_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img, self.__undoQueueIndex = undo(self.__undoQueue, self.__undoQueueIndex)
        if self.__undoQueueIndex == self.__undoQueue.qsize()-1:
            self.btn_undo.setEnabled(False)
        self.btn_redo.setEnabled(True)
        self.showImage(self.__current_img)

        self.clear_button_color()
        self.btn_undo.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')


    @QtCore.pyqtSlot()
    def on_btn_redo_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        self.__current_img, self.__undoQueueIndex = redo(self.__undoQueue, self.__undoQueueIndex)
        if self.__undoQueueIndex == 0:
            self.btn_redo.setEnabled(False)
        self.btn_undo.setEnabled(True)
        self.showImage(self.__current_img)

        self.clear_button_color()
        self.btn_redo.setStyleSheet('''
                QPushButton {
                    color: #ffd700
                }
                ''')

    @QtCore.pyqtSlot()
    def on_btn_inpainting_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        self.__show_info_message_box("draw on the image to modify the inpainting mask\nclick Confirm button to ensure your modification\nclick Open button to upload another mask image")

        # 开始绘制
        self.img_panel.flag = 2
        self.__current_operation = 'draw_mask'
        self.maskImage = QtGui.QPixmap(self.img_panel.size())
        self.maskImage.fill(QtGui.QColor('white'))

        # 新建一个白色背景的mask图片
        self.btn_confirm.setEnabled(True)
        self.btn_cancel.setEnabled(True)
        # confirm/cancel to finish painting，if confirm, inpaint with the mask，if cancel, clear the page


    def clear_button_color(self):
        self.btn_open.setStyleSheet('''
                QPushButton {
                    color: #fff
                }
                ''')
        self.btn_save.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_cutting.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_undo.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_redo.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_contrast.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_lol.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_deblur.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_denoise.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_dehaze.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_derain.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_inpainting.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_sr.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_rotate.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')
        self.btn_mirror.setStyleSheet('''
                        QPushButton {
                            color: #fff
                        }
                        ''')