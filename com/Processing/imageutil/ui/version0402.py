# -*- coding: utf-8 -*-
import copy

import cv2
# Form implementation generated from reading ui file 'version0402.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from queue import Queue
from PyQt5 import QtCore, QtGui, QtWidgets
import copy
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QImage, QPixmap, QGuiApplication, QCursor, QColor
from PyQt5.QtWidgets import QFileDialog, QGraphicsPixmapItem, QGraphicsScene, QSlider, QApplication, QInputDialog, \
    QLineEdit, QMessageBox
from com.Processing.imageutil.control.GCANetUtil import gcanProcess
from com.Processing.imageutil.ui.CustomLabel import ImageLabel
from com.Processing.imageutil.control.MirnetUtil import *
from com.Processing.imageutil.control.BasicUtil import *
from com.Processing.imageutil.control.UndoQueue import *

class MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1029, 774)
        MainWindow.setMinimumSize(QtCore.QSize(1029, 774))
        font = QtGui.QFont()
        font.setPointSize(10)
        MainWindow.setFont(font)

        self.create_widget(MainWindow)

        self.retranslateUi(MainWindow)

        self.__current_img = None
        self.__original_img = None  # origin image
        self.__last_img = None  # last step of operation
        self.__current_operation = None  # current operation record
        self.__temp_img = None

        self.__origin_count = 1

        self.__undoQueue = Queue(maxsize=10)
        self.__undoQueueIndex = 0
        clear()

        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def create_widget(self, MainWindow):
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.title = QtWidgets.QFrame(self.centralwidget)
        self.title.setGeometry(QtCore.QRect(0, 0, 1031, 65))
        self.title.setMinimumSize(QtCore.QSize(0, 65))
        self.title.setMaximumSize(QtCore.QSize(188888, 55))
        self.title.setStyleSheet("background: rgb(60, 60, 60)")
        self.title.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.title.setFrameShadow(QtWidgets.QFrame.Raised)
        self.title.setObjectName("title")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.title)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.operation = QtWidgets.QFrame(self.title)
        self.operation.setMinimumSize(QtCore.QSize(1000, 39))
        self.operation.setMaximumSize(QtCore.QSize(800, 45))
        self.operation.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.operation.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.operation.setFrameShadow(QtWidgets.QFrame.Raised)
        self.operation.setObjectName("operation")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.operation)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.btn_open = QtWidgets.QPushButton(self.operation)
        self.btn_open.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_open.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_open.setObjectName("btn_open")
        self.horizontalLayout_3.addWidget(self.btn_open)
        spacerItem = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem)
        self.btn_save = QtWidgets.QPushButton(self.operation)
        self.btn_save.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_save.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_save.setObjectName("btn_save")
        self.horizontalLayout_3.addWidget(self.btn_save)
        spacerItem1 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem1)
        self.btn_redo = QtWidgets.QPushButton(self.operation)
        self.btn_redo.setObjectName("btn_redo")
        self.horizontalLayout_3.addWidget(self.btn_redo)
        spacerItem2 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem2)
        self.btn_undo = QtWidgets.QPushButton(self.operation)
        self.btn_undo.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_undo.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_undo.setObjectName("btn_undo")
        self.horizontalLayout_3.addWidget(self.btn_undo)
        spacerItem3 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem3)
        self.btn_cutting = QtWidgets.QPushButton(self.operation)
        self.btn_cutting.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_cutting.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_cutting.setObjectName("btn_cutting")
        self.horizontalLayout_3.addWidget(self.btn_cutting)
        spacerItem4 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.btn_confirm = QtWidgets.QPushButton(self.operation)
        self.btn_confirm.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_confirm.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_confirm.setObjectName("btn_confirm")
        self.horizontalLayout_3.addWidget(self.btn_confirm)
        spacerItem5 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.btn_cancel = QtWidgets.QPushButton(self.operation)
        self.btn_cancel.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_cancel.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_cancel.setObjectName("btn_cancel")
        self.horizontalLayout_3.addWidget(self.btn_cancel)
        spacerItem6 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.btn_origin = QtWidgets.QPushButton(self.operation)
        self.btn_origin.setMinimumSize(QtCore.QSize(80, 0))
        self.btn_origin.setMaximumSize(QtCore.QSize(80, 16777215))
        self.btn_origin.setObjectName("btn_origin")
        self.horizontalLayout_3.addWidget(self.btn_origin)
        self.horizontalLayout_4.addWidget(self.operation)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setGeometry(QtCore.QRect(0, 60, 881, 691))
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_3)
        self.gridLayout.setObjectName("gridLayout")
        self.frame_4 = QtWidgets.QFrame(self.frame_3)
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.frame_4)
        self.gridLayout_2.setObjectName("gridLayout_2")
        # self.img_panel = QtWidgets.QLabel(self.frame_4)
        self.img_panel = ImageLabel(self.frame_4)
        self.img_panel.setStyleSheet("border-width: 1px;border-style: solid;border-color: rgb(218, 218, 218)")
        self.img_panel.setText("")
        self.img_panel.setObjectName("img_panel")
        self.gridLayout_2.addWidget(self.img_panel, 0, 1, 1, 1)
        self.gridLayout.addWidget(self.frame_4, 0, 0, 1, 1)
        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setGeometry(QtCore.QRect(880, 60, 150, 704))
        self.frame_5.setMinimumSize(QtCore.QSize(150, 0))
        self.frame_5.setMaximumSize(QtCore.QSize(150, 16777215))
        self.frame_5.setStyleSheet("background: rgb(51, 51, 51)")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.frame_6 = QtWidgets.QFrame(self.frame_5)
        self.frame_6.setGeometry(QtCore.QRect(10, 20, 135, 650))
        self.frame_6.setMinimumSize(QtCore.QSize(135, 650))
        self.frame_6.setMaximumSize(QtCore.QSize(135, 650))
        self.frame_6.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6.setObjectName("frame_6")
        self.btn_contrast = QtWidgets.QPushButton(self.frame_6)
        self.btn_contrast.setGeometry(QtCore.QRect(7, 20, 120, 35))
        self.btn_contrast.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_contrast.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_contrast.setObjectName("btn_contrast")
        self.btn_lol = QtWidgets.QPushButton(self.frame_6)
        self.btn_lol.setGeometry(QtCore.QRect(7, 80, 120, 35))
        self.btn_lol.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_lol.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_lol.setObjectName("btn_lol")
        self.btn_sr = QtWidgets.QPushButton(self.frame_6)
        self.btn_sr.setGeometry(QtCore.QRect(7, 260, 120, 35))
        self.btn_sr.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_sr.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_sr.setObjectName("btn_sr")
        self.btn_denoise = QtWidgets.QPushButton(self.frame_6)
        self.btn_denoise.setGeometry(QtCore.QRect(7, 140, 120, 35))
        self.btn_denoise.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_denoise.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_denoise.setObjectName("btn_denoise")
        self.btn_deblur = QtWidgets.QPushButton(self.frame_6)
        self.btn_deblur.setGeometry(QtCore.QRect(7, 200, 120, 35))
        self.btn_deblur.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_deblur.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_deblur.setObjectName("btn_deblur")
        self.btn_dehaze = QtWidgets.QPushButton(self.frame_6)
        self.btn_dehaze.setGeometry(QtCore.QRect(7, 320, 120, 35))
        self.btn_dehaze.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_dehaze.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_dehaze.setObjectName("btn_dehaze")
        self.btn_derain = QtWidgets.QPushButton(self.frame_6)
        self.btn_derain.setGeometry(QtCore.QRect(7, 380, 120, 35))
        self.btn_derain.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_derain.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_derain.setObjectName("btn_derain")
        self.btn_inpainting = QtWidgets.QPushButton(self.frame_6)
        self.btn_inpainting.setGeometry(QtCore.QRect(7, 440, 120, 35))
        self.btn_inpainting.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_inpainting.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_inpainting.setObjectName("btn_inpainting")
        self.frame = QtWidgets.QFrame(self.frame_6)
        self.frame.setGeometry(QtCore.QRect(0, 480, 140, 5))
        self.frame.setMinimumSize(QtCore.QSize(140, 3))
        self.frame.setMaximumSize(QtCore.QSize(16777215, 5))
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.btn_zoom = QtWidgets.QPushButton(self.frame_6)
        self.btn_zoom.setGeometry(QtCore.QRect(7, 490, 120, 35))
        self.btn_zoom.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_zoom.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_zoom.setObjectName("btn_zoom")
        self.btn_rotate = QtWidgets.QPushButton(self.frame_6)
        self.btn_rotate.setGeometry(QtCore.QRect(7, 540, 120, 35))
        self.btn_rotate.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_rotate.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_rotate.setObjectName("btn_rotate")
        self.btn_mirror = QtWidgets.QPushButton(self.frame_6)
        self.btn_mirror.setGeometry(QtCore.QRect(7, 590, 120, 35))
        self.btn_mirror.setMinimumSize(QtCore.QSize(120, 35))
        self.btn_mirror.setMaximumSize(QtCore.QSize(120, 35))
        self.btn_mirror.setObjectName("btn_mirror")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.btn_open.setText(_translate("MainWindow", "Open"))
        self.btn_save.setText(_translate("MainWindow", "Save"))
        self.btn_redo.setText(_translate("MainWindow", "Redo"))
        self.btn_undo.setText(_translate("MainWindow", "Undo"))
        self.btn_cutting.setText(_translate("MainWindow", "Clip"))
        self.btn_confirm.setText(_translate("MainWindow", "Confirm"))
        self.btn_cancel.setText(_translate("MainWindow", "Cancel"))
        self.btn_origin.setText(_translate("MainWindow", "Origin"))
        self.btn_contrast.setText(_translate("MainWindow", "Contrast Enhance"))
        self.btn_lol.setText(_translate("MainWindow", "Lowlight Enhance"))
        self.btn_sr.setText(_translate("MainWindow", "Super Resolution"))
        self.btn_denoise.setText(_translate("MainWindow", "Denoising"))
        self.btn_deblur.setText(_translate("MainWindow", "Deblurring"))
        self.btn_dehaze.setText(_translate("MainWindow", "Dehaze"))
        self.btn_derain.setText(_translate("MainWindow", "Derain"))
        self.btn_inpainting.setText(_translate("MainWindow", "Inpainting"))
        self.btn_zoom.setText(_translate("MainWindow", "Zoom"))
        self.btn_rotate.setText(_translate("MainWindow", "Rotate"))
        self.btn_mirror.setText(_translate("MainWindow", "Mirror"))

    @QtCore.pyqtSlot()
    def on_btn_open_clicked(self):
        """
        On click event of "open" button
        """
        img_name, img_type = QFileDialog.getOpenFileName(self, "Open the image", "", "*.png;;*.jpg;;*.jpeg;;*.bmp")
        if (img_name == "") or (img_name is None):
            self.__show_warning_message_box("Please Select Image")
            return

        img = cv2.imread(img_name)

        # Initialize the history records
        self.showImage(img)
        self.__current_img = img
        self.__last_img = self.__current_img
        self.__original_img = copy.deepcopy(self.__current_img)
        self.__original_img_path = img_name

        add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)

    def showImage(self, img, is_grayscale=False):
        print("show")
        x = img.shape[1]  # get image shape
        y = img.shape[0]
        self.zoomscale = 1  # image zoom scale
        bytesPerLine = 3 * x

        if len(img.shape) == 2:  # if input image is grey-scale, turns to 3-channels
            img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)

        frame = QImage(img.data.tobytes(), x, y, bytesPerLine, QImage.Format_RGB888).rgbSwapped()
        pix = QPixmap.fromImage(frame)
        self.img_panel.setPixmap(pix)
        self.img_panel.setFixedSize(pix.width(), pix.height())
        self.img_panel.repaint()


    def __show_warning_message_box(self, msg):
        QMessageBox.warning(self, "Warning", msg, QMessageBox.Ok)

    def __show_info_message_box(self, msg):
        QMessageBox.information(self, "Note", msg, QMessageBox.Ok)

    @QtCore.pyqtSlot()
    def on_btn_save_clicked(self):
        """
        On click event of "Save" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        ext_name = self.__original_img_path[self.__original_img_path.rindex("."):]
        img_path, img_type = QFileDialog.getSaveFileName(self, "Save Image", self.__original_img_path, "*" + ext_name)
        if (img_path != "" and img_type != ""):
            cv2.imwrite(img_path + '.png', self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_contrast_clicked(self):
        """
                On click event of "Contrast" button
                """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        # self.__current_img = adjust_contrast(self.__current_img, 0)
        self.__current_img = mirnet_process(self.__current_img, "contrast_enhancement")
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_lol_clicked(self):
        """
        On click event of "low light enhancement" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirnet_process(self.__current_img, "lowlight_enhancement")
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_denoise_clicked(self):
        """
        On click event of "denoising" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirnet_process(self.__current_img, "real_denoising")
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_deblur_clicked(self):
        """
        On click event of "deblurring" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirnet_process(self.__current_img, "deblurring")
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_sr_clicked(self):
        """
        On click event of "low light enhancement" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirnet_process(self.__current_img, "super_resolution", 3)
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_dehaze_clicked(self):
        """
        On click event of "Contrast" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = gcanProcess(self.__current_img, "dehaze")
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_derain_clicked(self):
        """
        On click event of "Contrast" button
        """
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = gcanProcess(self.__current_img, "derain")
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_rotate_clicked(self):

        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = rotate_transfer(self.__current_img, 2)

        add_img(self.__current_img, self.__undoQueue, self.__undoQueueIndex)

        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_mirror_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img = mirror_transfer(self.__current_img, 1)
        self.showImage(self.__current_img)

    @QtCore.pyqtSlot()
    def on_btn_origin_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        if self.__origin_count == 1:
            self.btn_origin.setText("Newest")
            self.showImage(self.__original_img)
        elif self.__origin_count == -1:
            self.btn_origin.setText("Origin")
            self.showImage(self.__current_img)
        self.__origin_count = self.__origin_count * -1

    @QtCore.pyqtSlot()
    def on_btn_cutting_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        self.__show_info_message_box("Click Confirm button to ensure your modification")
        self.__current_operation = "clip"
        self.img_panel.flag = True
        self.img_panel.setCursor(Qt.CrossCursor)

    @QtCore.pyqtSlot()
    def on_btn_confirm_clicked(self):
        if self.__current_operation == "clip":
            x_start, x_end = self.img_panel.img_x_start, self.img_panel.img_x_end
            y_start, y_end = self.img_panel.img_y_start, self.img_panel.img_y_end
            self.__current_img = crop_image(self.__current_img, x_start, x_end, y_start, y_end)
            self.showImage(self.__current_img)

            self.img_panel.clearRect()
            self.img_panel.flag = False
        self.__last_img = self.__current_img

        self.__current_operation = None

    @QtCore.pyqtSlot()
    def on_btn_cancel_clicked(self):
        if self.__current_operation == "clip":
            self.img_panel.clearRect()
            self.img_panel.flag = False
        self.__current_img = self.__last_img
        self.showImage(self.__current_img)

        self.__current_operation = None

    @QtCore.pyqtSlot()
    def on_btn_undo_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return
        self.__current_img, self.__undoQueueIndex = undo(self.__undoQueue, self.__undoQueueIndex)
        self.showImage(self.__current_img)


    @QtCore.pyqtSlot()
    def on_btn_redo_clicked(self):
        if self.__current_img is None:
            self.__show_warning_message_box("Haven't Select Image")
            return

        self.__current_img, self.__undoQueueIndex = redo(self.__undoQueue, self.__undoQueueIndex)
        self.showImage(self.__current_img)